var gameOver;

//number of circles to play with -- game starts at hard mode (6 circles)
var numberOfSquares = 6;

//array of colors in game session
var colors = [];
//variable holding the winning rgb color
var pickedColor;

//selecting elements from HTML
var squares = document.querySelectorAll(".square");
var colorDisplay = document.querySelector("#colorDisplay");
var messageDisplay = document.querySelector("#msg");
var title = document.querySelector("h1");
var resetButton = document.querySelector("#reset");
var difBtn = document.querySelectorAll(".difBtn");
var body = document.querySelector("body");

init();

function init() {
    setupDiffButtons();
    setupSquares();
    resetGame();
}

//event listeners for mode buttons
function setupDiffButtons() {
    for (var i = 0; i < difBtn.length; i++) {
          difBtn[i].addEventListener("click", function () {
              //highlight the active mode
              difBtn[0].classList.remove("selected");
              difBtn[1].classList.remove("selected");
              this.classList.add("selected");
              //update the number of game circles based on selected mode
              numberOfSquares = this.textContent === "Easy" ? 3 : 6;
              //reset game
              resetGame();
          })
      }
}

//main logic - applies colors to all squares and ads event listeners determining whether the color was guessed correctly or not
function setupSquares() {
    for (var i = 0; i < squares.length; i++) {
        squares[i].style.backgroundColor = colors[i];
        squares[i].addEventListener("click", function () {
            if (gameOver) {
                resetGame();
            } else if (this.style.backgroundColor === pickedColor) {
                messageDisplay.textContent = "You've won!";
                changeColors(pickedColor);
                resetButton.textContent = "Play Again?";
                gameOver = true;
            } else {
                this.style.backgroundColor = "#fff";
                messageDisplay.textContent = "Try again!";
            }
        })
    }
}

//click listener for reset button
resetButton.addEventListener("click", function () {
    resetGame();
});

function resetGame() {
    gameOver = false;
    colors = generateRandomColors(numberOfSquares);
    //pick win color
    pickedColor = pickColor();
    //update UI for new game
    colorDisplay.textContent = pickedColor;
/*    title.style.backgroundColor = "#fff";*/
    messageDisplay.textContent = "";
    //fill circles with colors
    for (var i = 0; i < squares.length; i++) {
        if (colors[i]) {
            squares[i].style.backgroundColor = colors[i];
            squares[i].style.display = "block";
        } else {
            squares[i].style.display = "none";
        }
    }
}

//changes colors of all squares upon win
function changeColors(color) {
    for (var i = 0; i < squares.length; i++) {
                squares[i].style.backgroundColor = color;
    }
/*    title.style.backgroundColor = color;*/
}

//picks a random color from the color array
function pickColor() {
    var random = Math.floor(Math.random() * colors.length);
    return colors[random];
}

//builds and returns an array of "num" colors generated by "randomColor()" function
function generateRandomColors(num) {
    var arr = [];
    for (var i = 0; i < num; i++) {
        arr.push(randomColor());
    }
    return arr;
}

//generates a random RGB color
function randomColor() {
    var r = Math.floor(Math.random() * 256);
    var g = Math.floor(Math.random() * 256);
    var b = Math.floor(Math.random() * 256);
    return "rgb(" + r + ", " + g + ", " + b + ")";
}